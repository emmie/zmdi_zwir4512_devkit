# interface:  These are for debug adapters.
#             JTAG, SWD and other adapters go here.
#
# Interface Driver: ftdi
# This driver is for adapters using the MPSSE (Multi-Protocol Synchronous
# Serial Engine) mode built into many FTDI chips, such as the FT2232,
# FT4232 and FT232H.
# The driver is using libusb-1.0 in asynchronous mode to talk to the FTDI
# device, bypassing intermediate libraries like libftdi or D2XX.
interface ftdi

# Config Command: ftdi_vid_pid [vid pid]+
#
# The vendor ID and product ID of the adapter. Up to eight [vid, pid] pairs
# may be given
ftdi_vid_pid 0x0403 0x6010

# Config Command: ftdi_layout_init data direction
#
# Specifies the initial values of the FTDI GPIO data and direction registers.
# Each value is a 16-bit number corresponding to the concatenation of the high
# and low FTDI GPIO registers. The values should be selected based on the
# schematics of the adapter, such that all signals are set to safe levels with
# minimal impact on the target system. Avoid floating inputs, conflicting
# outputs and initially asserted reset signals.
ftdi_layout_init 0x0388 0x038b

# SRST: System Reset
# TRST: JTAG TAP Reset
# Config Command: ftdi_layout_signal name [-data|-ndata data_mask] \
#                 [-input|-ninput input_mask] [-oe|-noe oe_mask]   \
#                 [-alias|-nalias name]
#
# Creates a signal with the specified name, controlled by one or more FTDI GPIO
# pins via a range of possible buffer connections. The masks are FTDI GPIO
# register bitmasks to tell the driver the connection and type of the output
# buffer driving the respective signal. data_mask is the bitmask for the pin(s)
# connected to the data input of the output buffer. -ndata is used with
# inverting data inputs and -data with non-inverting inputs. The -oe (or -noe)
# option tells where the output-enable (or not-output-enable) input to the
# output buffer is connected. The options -input and -ninput specify the bitmask
# for pins to be read with the method ftdi_get_signal.
ftdi_layout_signal nTRST -data 0x0100
ftdi_layout_signal nSRST -data 0x0080 -noe 0x200

# script for stm32f1x family

# CHIPNAME: This gives a name to the overall chip, and is used as part of tap
# identifier dotted names. While the default is normally provided by the chip
# manufacturer, board files may need to distinguish between instances of a chip.
if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32f1x
}

# ENDIAN: By default little - although chips may hard-wire big. Chips that can’t
# change endianness don’t need to use this variable.
if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

# JTAG scan chain
# CPUTAPID: When OpenOCD examines the JTAG chain, it can be told verify the
# chips against the JTAG IDCODE register. The target file will hold one or
# more defaults, but sometimes the chip in a board will use a different ID
# (perhaps a newer revision).
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0008 Section 26.6.3
      set _CPUTAPID 0x3ba00477
   } {
      # this is the SW-DP tap id not the jtag tap id
      set _CPUTAPID 0x1ba01477
   }
}


# Work-area is a space in RAM used for flash programming
# By default use 16kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

# TAP > Test Access Port
# -irlen: The length in bits of the instruction register, such as 4 or 5 bits
# Document RM0008. Section 31.5
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

# BS > Boundary scan
#
if { [info exists BSTAPID] } {
   # FIXME this never gets used to override defaults...
   set _BSTAPID $BSTAPID
} else {
  # See STM Document RM0008
  # Section 31.6.2
  # Low density devices, Rev A
  set _BSTAPID1 0x06412041
  # Medium density devices, Rev A
  set _BSTAPID2 0x06410041
  # Medium density devices, Rev B and Rev Z
  set _BSTAPID3 0x16410041
  set _BSTAPID4 0x06420041
  # High density devices, Rev A
  set _BSTAPID5 0x06414041
  # Connectivity line devices, Rev A and Rev Z
  set _BSTAPID6 0x06418041
  # XL line devices, Rev A
  set _BSTAPID7 0x06430041
  # VL line devices, Rev A and Z In medium-density and high-density value line devices
  set _BSTAPID8 0x06420041
  # VL line devices, Rev A
  set _BSTAPID9 0x06428041

}

# -irlen: The length in bits of the instruction register, such as 4 or 5 bits
# Document RM0008. Section 31.5
jtag newtap $_CHIPNAME bs -irlen 5 -expected-id $_BSTAPID1 \
	-expected-id $_BSTAPID2 -expected-id $_BSTAPID3 \
	-expected-id $_BSTAPID4 -expected-id $_BSTAPID5 \
	-expected-id $_BSTAPID6 -expected-id $_BSTAPID7 \
	-expected-id $_BSTAPID8 -expected-id $_BSTAPID9

# _TARGETNAME: By convention, this variable is created by the target
# configuration script. The board configuration file may make use of
# this variable to configure things like a “reset init” script, or other
# things specific to that board and that target. If the chip has 2 targets,
# the names are _TARGETNAME0, _TARGETNAME1, ... etc.
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
$_TARGETNAME configure -event gdb-detach {
  cortex_m vector_catch none
  resume
}

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz,
# so use F_JTAG = 1MHz
adapter_khz 1000

# How long (in milliseconds) OpenOCD should wait after deasserting nSRST
# (active-low system reset) before starting new JTAG operations. When a
# board has a reset button connected to SRST line it will probably have
# hardware debouncing, implying you should use this.
adapter_nsrst_delay 100

# How long (in milliseconds) OpenOCD should wait after deasserting nTRST
# (active-low JTAG TAP reset) before starting new JTAG operations
jtag_ntrst_delay 100

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
# Config Command:
#  flash bank name driver base size chip_width bus_width target [driver_options]
flash bank $_FLASHNAME stm32f1x 0x08000000 0 0 0 $_TARGETNAME

# if srst is not fitted use SYSRESETREQ to perform a soft reset
#
# Command: cortex_m reset_config (sysresetreq|vectreset)
#
# Control reset handling if hardware srst is not fitted (See reset_config).
#   - sysresetreq use AIRCR SYSRESETREQ to reset system.
#   - vectreset use AIRCR VECTRESET to reset system (default).
#
# Using vectreset is a safe option for Cortex-M3, M4 and M7 cores. This however
# has the disadvantage of only resetting the core, all peripherals are
# unaffected. A solution would be to use a reset-init event handler to manually
# reset the peripherals (See Target Events).
#
# Cortex-M0, M0+ and M1 do not support vectreset, use sysresetreq instead.
cortex_m reset_config vectreset

# Command: gdb_breakpoint_override [hard|soft|disable]:
# Force breakpoint type for gdb break commands. This option supports GDB GUIs
# which don’t distinguish hard versus soft breakpoints, if the default OpenOCD
# and GDB behaviour is not sufficient. GDB normally uses hardware breakpoints
# if the memory map has been set up for flash regions.
gdb_breakpoint_override hard

# Config Command: gdb_flash_program (enable|disable):
# Set to enable to cause OpenOCD to program the flash memory when a vFlash
# packet is received. The default behaviour is enable.
gdb_flash_program enable

# Config Command: gdb_memory_map (enable|disable):
# Set to enable to cause OpenOCD to send the memory configuration to GDB when
# requested. GDB will then know when to set hardware breakpoints, and program
# flash using the GDB load command. gdb_flash_program enable must also be
# enabled for flash programming to work. Default behaviour is enable.
gdb_memory_map enable

# Config Command init:
#
# This command terminates the configuration stage and enters the run stage.
# This helps when you need to have the startup scripts manage tasks such as
# resetting the target, programming flash, etc. To reset the CPU upon startup,
# add "init" and "reset" at the end of the config script or at the end of the
# OpenOCD command line using the -c command line switch.
init

# Command: reset_config mode_flag ...
#
# This command displays or modifies the reset configuration of your combination
# of JTAG board and target in target configuration scripts. Information earlier
# in this section describes the kind of problems the command is intended to
# address (see SRST and TRST Issues). As a rule this command belongs only in
# board config files, describing issues like board doesn’t connect TRST; or in
# user config files, addressing limitations derived from a particular
# combination of interface and board. (An unlikely example would be using a
# TRST-only adapter with a board that only wires up SRST.)
#
# The mode_flag options can be specified in any order, but only one of each type
# – signals, combination, gates, trst_type, srst_type and connect_type – may be
# specified at a time
#
# - signals: can specify which of the reset signals are connected. For example,
#            If the JTAG interface provides SRST, but the board doesn’t connect
#            that signal properly, then OpenOCD can’t use it.
#            Possible values are: none (the default), trst_only, srst_only and
#            trst_and_srst.
#
# - combinations: optional value specifying broken reset signal implementations
#        - separate (default)
#
#        - srst_pulls_trst: states that the test logic is reset together with the
#          reset of the system (e.g. NXP LPC2000, "broken" board layout).
#
#        - trst_pulls_srst: says that the system is reset together with the test
#          logic (only hypothetical, I haven’t seen hardware with such a bug,
#          and can be worked around).
#
#        - combined: implies both srst_pulls_trst and trst_pulls_srst.
#
# reset_config [none|trst_only|srst_only|trst_and_srst]
#          [srst_pulls_trst|trst_pulls_srst|combined|separate]
#          [srst_gates_jtag|srst_nogate] [trst_push_pull|trst_open_drain]
#          [srst_push_pull|srst_open_drain]
#          [connect_deassert_srst|connect_assert_srst]
reset_config trst_only srst_pulls_trst

# Memory access commands
# These commands allow accesses of a specific size to the memory system. Often
# these are used to configure the current target in some special way.
# For example - one may need to write certain values to the SDRAM controller
# to enable SDRAM.
#
# Command: mwd [phys] addr doubleword [count]
# Command: mww [phys] addr word [count]       <<<<<
# Command: mwh [phys] addr halfword [count]
# Command: mwb [phys] addr byte [count]
#
# Writes the specified doubleword (64 bits), word (32 bits), halfword (16 bits),
# or byte (8-bit) value, at the specified address addr. When the current target
# has an MMU which is present and active, addr is interpreted as a virtual
# address. Otherwise, or if the optional phys flag is specified, addr is
# interpreted as a physical address. If count is specified, fills that many
# units of consecutive address.
stm32f1x.cpu mww 0xe0042004 0x107
